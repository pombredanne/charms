#!/bin/bash
LOG=/var/log/pam_script.log

LOCKDIR=/var/db/pam_ses_open/
LOCKFD=10
TIMEOUT=10
mkdir -p $LOCKDIR

(
if ! flock --timeout $TIMEOUT --exclusive $LOCKFD
then
  mail -s 'Monitoring: pam_ses_open lock timeout' monitoring@scraperwiki.com <<EOF
HOST: $(hostname)
\$0 \$@: $0 $@
PAM_USER: '$PAM_USER'
PAM_SERVICE: '$PAM_SERVICE'
Entering PAM environment failed because lock timed out after ${TIMEOUT}s.

Original developers assumed that this should not happen. Since it has,
something has gone wrong.

Possible causes:
broken flock
unexpectedly high system load

git repo where this script lives:
https://github.com/scraperwiki/charms/tree/master/raring/cobalt/hooks/config

EOF
  exit 1
fi

# Total limit over all processes in the cgroup
MemoryLimit=$((512*1024*1024))

echo "$PAM_USER login" >> $LOG

# Check we're running as a databox (primary group), we don't want to accidentally
# put our terminal into a cgroup (or create mounts that are meaningless)
groups=$(id -Gn "$PAM_USER")
if [ "${groups#databox}" == "$groups" ]
then
  echo "$PAM_USER ignored" >> $LOG
  exit 0
fi

mkdir -p /jails/$PAM_USER > /dev/null 2>&1

if [ ! -d /sys/fs/cgroup/cpu/$PAM_USER ]
then
  cgcreate -t $PAM_USER -g memory,cpu,cpuacct:$PAM_USER
fi

echo $MemoryLimit > /sys/fs/cgroup/memory/$PAM_USER/memory.limit_in_bytes

# CPU share is form of priority. By specifying a low number here, we
# ensure that important system services get a higher share of the CPU
# and thus remain responsive.
Priority=12
echo $Priority > /sys/fs/cgroup/cpu/$PAM_USER/cpu.shares

# 13/07/30 Peter and Chris thought about this and decided that it isn't
# desirable. It may turn out to be useful later, but not set in this manner.

# CpuTime=100000
# CpuPeriod=100000
# echo $CpuPeriod > /sys/fs/cgroup/cpu/$PAM_USER/cpu.cfs_period_us
# echo $CpuTime > /sys/fs/cgroup/cpu/$PAM_USER/cpu.cfs_quota_us

# Put the owning process (usually the "su -l" or cron child process)
# into the cgroup (and therefore all of its future children)
echo $PPID > /sys/fs/cgroup/cpu/$PAM_USER/tasks
echo $PPID > /sys/fs/cgroup/memory/$PAM_USER/tasks
echo $PPID > /sys/fs/cgroup/cpuacct/$PAM_USER/tasks

have_mounts_changed=false
# mount an fs if it's not already mounted
trymount () {
  eval mount_dir=\${$#}

  if ! grep -qw "${mount_dir}" /var/db/mounts
  then
    mount "$@"
    have_mounts_changed=true
  fi
} >> $LOG 2>&1

trymount --bind /opt/basejail /jails/$PAM_USER
trymount --bind /var/spool/cron/crontabs /jails/$PAM_USER/var/spool/cron/crontabs
trymount --bind /ebs/home/$PAM_USER /jails/$PAM_USER/home
trymount --bind /dev /jails/$PAM_USER/dev
trymount --bind /dev/pts /jails/$PAM_USER/dev/pts
trymount --bind /proc /jails/$PAM_USER/proc

if $have_mounts_changed
then
  echo "Mounts have changed..." >> $LOG
  (
    flock -w 2 9 || exit 99
    cp /proc/mounts /var/db/mounts+
    mv /var/db/mounts+ /var/db/mounts
  ) 9>/var/db/mounts.lock
fi

# 10 is LOCKFD (but in bash cannot write literal $LOCKFD)
) 10>${LOCKDIR}/${PAM_USER}.lock
